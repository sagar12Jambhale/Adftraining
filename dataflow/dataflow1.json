{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "cosmojoinlink",
						"type": "LinkedServiceReference"
					},
					"name": "empdetailsource",
					"description": "emp details read from cosmodb"
				},
				{
					"linkedService": {
						"referenceName": "cosmojoinlink",
						"type": "LinkedServiceReference"
					},
					"name": "Department",
					"description": "read data from cosmodb Dep container"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sinkempdetails",
					"description": "sink department and empdatails"
				}
			],
			"transformations": [
				{
					"name": "Empjoindeatails",
					"description": "Joined data from empdetails containner"
				},
				{
					"name": "selectDatafromempdetails",
					"description": "select Data from emp details"
				}
			],
			"scriptLines": [
				"source(output(",
				"          salary as integer,",
				"          emp_id as short,",
				"          empname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     container: 'empdetails',",
				"     storeType: 'oltp',",
				"     format: 'document',",
				"     store: 'cosmosDB') ~> empdetailsource",
				"source(output(",
				"          deptlocation as string,",
				"          emp_id as short,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     container: 'DEPT',",
				"     storeType: 'oltp',",
				"     format: 'document',",
				"     store: 'cosmosDB') ~> Department",
				"empdetailsource, Department join(empdetailsource@emp_id == Department@emp_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Empjoindeatails",
				"Empjoindeatails select(mapColumn(",
				"          salary,",
				"          emp_id = empdetailsource@emp_id,",
				"          empname,",
				"          deptlocation,",
				"          emp_id = Department@emp_id,",
				"          deptname",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDatafromempdetails",
				"selectDatafromempdetails sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          emp_id as string,",
				"          deptname as string,",
				"          deptlocation as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkempdetails"
			]
		}
	}
}