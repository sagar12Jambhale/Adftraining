{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"sagaradfgitemp": {
			"type": "string"
		},
		"cosmodbdept": {
			"type": "string"
		},
		"AzureBlobStorage123": {
			"type": "string"
		},
		"AzureBlobStoragdept": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ADF_Sagar_Git_test123')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ADF_Sagar_Git_test123",
						"description": "ADF_Sagar_Git_test123",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "[parameters('sagaradfgitemp')]",
								"type": "LinkedServiceReference"
							},
							"name": "ADFdata1",
							"description": "ADFdata123"
						},
						{
							"linkedService": {
								"referenceName": "[parameters('cosmodbdept')]",
								"type": "LinkedServiceReference"
							},
							"name": "ADFData123",
							"description": "ADFData123"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "[parameters('AzureBlobStorage123')]",
								"type": "LinkedServiceReference"
							},
							"name": "Emp"
						},
						{
							"linkedService": {
								"referenceName": "[parameters('AzureBlobStoragdept')]",
								"type": "LinkedServiceReference"
							},
							"name": "dept"
						}
					],
					"transformations": [
						{
							"name": "adfjoin"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department as short,",
						"          salary as integer,",
						"          Empname as string,",
						"          empId as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     container: 'emp_sagar',",
						"     storeType: 'oltp',",
						"     format: 'document',",
						"     store: 'cosmosDB') ~> ADFdata1",
						"source(output(",
						"          Depid as short,",
						"          Depname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     container: 'dept_sagar',",
						"     storeType: 'oltp',",
						"     format: 'document',",
						"     store: 'cosmosDB') ~> ADFData123",
						"ADFdata1, ADFData123 join(department == Depid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> adfjoin",
						"adfjoin split(Depid==1,",
						"     Depid==2,",
						"     disjoint: false) ~> split1@(dept1, dept2)",
						"split1@dept1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sagarsorcefordatacopy',",
						"     folderPath: 'sagarDestination',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> Emp",
						"split1@dept2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sagarsorcefordatacopy',",
						"     folderPath: 'sagarDestination',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2) ~> dept"
					]
				}
			},
			"dependsOn": []
		}
	]
}